import asyncio
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types.message import ContentType
import logging
import datetime
from config import TOKEN, PAYMENT_TOKEN, CHAT_ID
from file_of_button import kb_sussed_pay, kb_send_number_phone
import sql_for_dimacoin

logging.basicConfig(level=logging.INFO)


storage = MemoryStorage()
bot = Bot(TOKEN)
dp = Dispatcher(bot, storage=storage)

PRICE = types.LabeledPrice(label='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü –≤ –∫–æ–ø–µ–π–∫–∞—Ö - ', amount=500*100)   # –≤ –∫–æ–ø–µ–π–∫–∞—Ö

support = ['—Ñ–ª–µ—à–∫–∏', '–Ω–∞—É—à–Ω–∏–∫–∏', '–º—ã—à–∫–∏', '–ø—Ä–æ–≤–æ–¥–∞', '–≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã']
for_help_cmd = ['—á—Ç–æ', '–Ω–µ –ø–æ–Ω–∏–º–∞—é', '–±–ª–∏–Ω', '–∞–∞', 'help']


class Register(StatesGroup):
    desc = State()


@dp.message_handler(content_types=["new_chat_members"])
async def new_user(message: types.Message):
    await sql_for_dimacoin.new_user(user_id=message.from_user.id)
    while True:
        d1 = datetime.datetime.today()
        if d1.strftime("%m%d%S") == "010100":  # –≤ 1 —è–Ω–≤–∞—Ä—è 00 —Å–µ–∫—É–Ω–¥ –±—É–¥–µ—Ç +20 Dimacoin
            await sql_for_dimacoin.update_count_all(money=20)


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.reply('/buy_500 - –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤\n'
                        '/desc - –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –∞–¥—Ä–µ—Å\n'
                        '<code>–¶–µ–Ω—ã</code> - –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤\n'
                        '<code>–ú–æ–π –±–∞–ª–∞–Ω—Å</code> - –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å\n', parse_mode='html')
    while True:
        await sql_for_dimacoin.update_time(user_id=message.from_user.id, seconds=100)
        await asyncio.sleep(10)
        sel_time = await sql_for_dimacoin.sel_time(user_id=message.from_user.id)
        type(int(sel_time[0]))
        if int(sel_time[0]) >= 2000:
            await message.answer('–ù–∞–ø–∏—à–∏ –º–Ω–µ!')
            await sql_for_dimacoin.update_time(user_id=message.from_user.id, seconds=-2500)


@dp.message_handler(Text('–ú–æ–π –±–∞–ª–∞–Ω—Å'))
async def cmd_my_balance(message: types.Message):
    await bot.send_photo(message.from_user.id, photo='https://yandex.ru/images/search?pos=1&from=tabbar&img_url=http%3A%2F%2Favatars.yandex.net%2Fget-music-content%2F2114230%2F1bd0db8b.a.9434830-1%2Fm1000x1000%3Fwebp%3Dfalse&text=dima+money&rpt=simage&lr=10846')
    check = await sql_for_dimacoin.sel_count(user_id=message.from_user.id)
    await message.answer(f" ü§ë –¢–≤–æ–π ca$h - <i><b>{check[0]}</b></i> ü§ë", parse_mode='html')


@dp.message_handler(Text('–¶–µ–Ω—ã'))
async def cmd_prices(message: types.Message):
    await message.answer('–í dimacoin`–∞—Ö\n'
                         '_______________\n'
                         '–§–ª–µ—à–∫–∏ - 150\n'
                         '–ù–∞—É—à–Ω–∏–∫–∏ - 80\n'
                         '–ú—ã—à–∫–∏ - 15\n'
                         '–ü—Ä–æ–≤–æ–¥–∞ - 50\n'
                         '–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã - 5\n')
    await sql_for_dimacoin.update_time(user_id=message.from_user.id, seconds=-20)


@dp.message_handler(commands=['buy_500'])
async def cmd_buy(message: types.Message):
    if PAYMENT_TOKEN.split(':')[1] == 'TEST':
        await bot.send_message(message.from_user.id, text='This is TEST!')
    # send_invoice -
    await bot.send_invoice(title='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞!',
                           description='–ï–∂–µ –º–µ—Å—è—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞\n–í —Ä–∞–∑–º–µ—Ä–µ 500 —Ä—É–±–ª–µ–π',
                           provider_token=PAYMENT_TOKEN,
                           currency='rub',
                           photo_url='https://avatars.mds.yandex.net/i?id=e665ce9a6cb3c54ba459bcfa9c52366e-3861166-images-thumbs&n=13',
                           photo_size=416,
                           photo_width=416,
                           photo_height=234,
                           is_flexible=False,   # True —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∫–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏
                           prices=[PRICE],
                           start_parameter='one-mouth-subscription',
                           payload='test-invoice-payload',
                           chat_id=message.from_user.id)
    await sql_for_dimacoin.update_time(user_id=message.from_user.id, seconds=-250)


@dp.pre_checkout_query_handler(lambda query: True)   # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ 1 –∑–∞–ø—Ä–æ—Å–∞ user`a
async def pre_check(pre_c_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_c_q.id, ok=True)   # –ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –∑–∞ 10 —Å–µ–∫ –∏–ª–∏ –ø–ª–∞—Ç—ë–∂ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω


@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def success_payment(message: types.Message):
    print('SUCCESSFUL PAY:')
    payment_into = message.successful_payment.to_python()
    for f, v in payment_into.items():
        print(f'{f} = {v}')
    await bot.send_message(message.chat.id,
                           f'–ü–ª–∞—Ç—ë–∂ –Ω–∞:{message.successful_payment.total_amount // 100} {message.successful_payment.currency}\n –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ, + 150 DIMaCOIN')
    await sql_for_dimacoin.update_count(user_id=message.from_user.id, money=150)
    await message.answer("–¢—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä—ã!", reply_markup=kb_sussed_pay)
    await sql_for_dimacoin.update_time(user_id=message.from_user.id, seconds=-250)


@dp.message_handler(commands=["–§–ª–µ—à–∫–∏"])
async def cmd_buy(message: types.Message):
    args = message.get_args()
    try:
        get_number = int(args)
    except (ValueError, TypeError):
        return await message.answer("–ù–∞–ø–∏—à–∏ –Ω–∞–ø—Ä–∏–º–µ—Ä —Ç–∞–∫: –§–ª–µ—à–∫–∏ 1")

    check = await sql_for_dimacoin.sel_count(user_id=message.from_user.id)
    if check[0] >= 150 * get_number:
        await sql_for_dimacoin.update_count(user_id=message.from_user.id, money=-150 * get_number)
        description = await sql_for_dimacoin.sel_desc(user_id=message.from_user.id)
        if description != "NO":
            await message.reply("–£—Å–ø–µ—à–Ω–æ! –ñ–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 3—Ö —Å—É—Ç–æ–∫")
            await bot.send_message(CHAT_ID, f'–§–ª–µ—à–∫–∏ {get_number} - {description[0]}')
            if get_number >= 5:
                await sql_for_dimacoin.update_count(user_id=message.from_user.id, money=10)
                await message.answer('–ö—ç—à –±—ç–∫ 10 DimaCoins')
            if get_number >= 10:
                await sql_for_dimacoin.update_count(user_id=message.from_user.id, money=20)
                await message.answer('–ö—ç—à –±—ç–∫ 20 DimaCoins')
            if get_number >= 20:
                await sql_for_dimacoin.update_count(user_id=message.from_user.id, money=30)
                await message.answer('–ö—ç—à –±—ç–∫ 30 DimaCoins')
        else:
            await message.reply('–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ!')
    else:
        await message.answer('–û—à–∏–±–∫–∞! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!!')
    await sql_for_dimacoin.update_time(user_id=message.from_user.id, seconds=-250)


@dp.message_handler(commands=["–ù–∞—É—à–Ω–∏–∫–∏"])
async def cmd_buy(message: types.Message):
    args = message.get_args()
    try:
        get_number = int(args)
    except (ValueError, TypeError):
        return await message.answer("–ù–∞–ø–∏—à–∏ –Ω–∞–ø—Ä–∏–º–µ—Ä —Ç–∞–∫: –ù–∞—É—à–Ω–∏–∫–∏ 1")

    check = await sql_for_dimacoin.sel_count(user_id=message.from_user.id)
    if check[0] >= 80 * get_number:
        await sql_for_dimacoin.update_count(user_id=message.from_user.id, money=-80 * get_number)
        description = await sql_for_dimacoin.sel_desc(user_id=message.from_user.id)
        if description != "NO":
            await message.reply("–£—Å–ø–µ—à–Ω–æ! –ñ–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 3—Ö —Å—É—Ç–æ–∫")
            await bot.send_message(CHAT_ID, f'–ù–∞—É—à–Ω–∏–∫–∏ {get_number} - {description[0]}')
            if get_number >= 5:
                await sql_for_dimacoin.update_count(user_id=message.from_user.id, money=10)
                await message.answer('–ö—ç—à –±—ç–∫ 10 DimaCoins')
            if get_number >= 10:
                await sql_for_dimacoin.update_count(user_id=message.from_user.id, money=20)
                await message.answer('–ö—ç—à –±—ç–∫ 20 DimaCoins')
            if get_number >= 10:
                await sql_for_dimacoin.update_count(user_id=message.from_user.id, money=30)
                await message.answer('–ö—ç—à –±—ç–∫ 30 DimaCoins')
        else:
            await message.reply('–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ!')
    else:
        await message.answer('–û—à–∏–±–∫–∞! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!!')
    await sql_for_dimacoin.update_time(user_id=message.from_user.id, seconds=-200)


@dp.message_handler(commands=["–ú—ã—à–∫–∏"])
async def cmd_buy(message: types.Message):
    args = message.get_args()
    try:
        get_number = int(args)
    except (ValueError, TypeError):
        return await message.answer("–ù–∞–ø–∏—à–∏ –Ω–∞–ø—Ä–∏–º–µ—Ä —Ç–∞–∫: –ú—ã—à–∫–∏ 1")

    check = await sql_for_dimacoin.sel_count(user_id=message.from_user.id)
    if check[0] >= 15 * get_number:
        await sql_for_dimacoin.update_count(user_id=message.from_user.id, money=-15 * get_number)
        description = await sql_for_dimacoin.sel_desc(user_id=message.from_user.id)
        if description != "NO":
            await message.reply("–£—Å–ø–µ—à–Ω–æ! –ñ–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 3—Ö —Å—É—Ç–æ–∫")
            await bot.send_message(CHAT_ID, f'–ú—ã—à–∫–∏ {get_number} - {description[0]}')
            if get_number >= 5:
                await sql_for_dimacoin.update_count(user_id=message.from_user.id, money=10)
                await message.answer('–ö—ç—à –±—ç–∫ 10 DimaCoins')
            if get_number >= 10:
                await sql_for_dimacoin.update_count(user_id=message.from_user.id, money=20)
                await message.answer('–ö—ç—à –±—ç–∫ 20 DimaCoins')
            if get_number >= 10:
                await sql_for_dimacoin.update_count(user_id=message.from_user.id, money=30)
                await message.answer('–ö—ç—à –±—ç–∫ 30 DimaCoins')
        else:
            await message.reply('–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ!')
    else:
        await message.answer('–û—à–∏–±–∫–∞! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!!')
    await sql_for_dimacoin.update_time(user_id=message.from_user.id, seconds=-500)


@dp.message_handler(commands=["–ü—Ä–æ–≤–æ–¥–∞"])
async def cmd_buy(message: types.Message):
    args = message.get_args()
    try:
        get_number = int(args)
    except (ValueError, TypeError):
        return await message.answer("–ù–∞–ø–∏—à–∏ –Ω–∞–ø—Ä–∏–º–µ—Ä —Ç–∞–∫: –ü—Ä–æ–≤–æ–¥–∞ 1")

    check = await sql_for_dimacoin.sel_count(user_id=message.from_user.id)
    if check[0] >= 50 * get_number:
        await sql_for_dimacoin.update_count(user_id=message.from_user.id, money=-50 * get_number)
        description = await sql_for_dimacoin.sel_desc(user_id=message.from_user.id)
        if description != "NO":
            await message.reply("–£—Å–ø–µ—à–Ω–æ! –ñ–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 3—Ö —Å—É—Ç–æ–∫")
            await bot.send_message(CHAT_ID, f'–ü—Ä–æ–≤–æ–¥–∞ {get_number} - {description[0]}')
            if get_number >= 5:
                await sql_for_dimacoin.update_count(user_id=message.from_user.id, money=10)
                await message.answer('–ö—ç—à –±—ç–∫ 10 DimaCoins')
            if get_number >= 10:
                await sql_for_dimacoin.update_count(user_id=message.from_user.id, money=20)
                await message.answer('–ö—ç—à –±—ç–∫ 20 DimaCoins')
            if get_number >= 10:
                await sql_for_dimacoin.update_count(user_id=message.from_user.id, money=30)
                await message.answer('–ö—ç—à –±—ç–∫ 30 DimaCoins')
        else:
            await message.reply('–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ!')
    else:
        await message.answer('–û—à–∏–±–∫–∞! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!!')
    await sql_for_dimacoin.update_time(user_id=message.from_user.id, seconds=-25)


@dp.message_handler(commands=["–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã"])
async def cmd_buy(message: types.Message):
    args = message.get_args()
    try:
        get_number = int(args)
    except (ValueError, TypeError):
        return await message.answer("–ù–∞–ø–∏—à–∏ –Ω–∞–ø—Ä–∏–º–µ—Ä —Ç–∞–∫: –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã 1")

    check = await sql_for_dimacoin.sel_count(user_id=message.from_user.id)
    if check[0] >= 5 * get_number:
        await sql_for_dimacoin.update_count(user_id=message.from_user.id, money=-5 * get_number)
        description = await sql_for_dimacoin.sel_desc(user_id=message.from_user.id)
        if description != "NO":
            await message.reply("–£—Å–ø–µ—à–Ω–æ! –ñ–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 3—Ö —Å—É—Ç–æ–∫")
            await bot.send_message(CHAT_ID, f'–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã {get_number} - {description[0]}')
            if get_number >= 5:
                await sql_for_dimacoin.update_count(user_id=message.from_user.id, money=10)
                await message.answer('–ö—ç—à –±—ç–∫ 10 DimaCoins')
            if get_number >= 10:
                await sql_for_dimacoin.update_count(user_id=message.from_user.id, money=20)
                await message.answer('–ö—ç—à –±—ç–∫ 20 DimaCoins')
            if get_number >= 10:
                await sql_for_dimacoin.update_count(user_id=message.from_user.id, money=30)
                await message.answer('–ö—ç—à –±—ç–∫ 30 DimaCoins')
        else:
            await message.reply('–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ!')
    else:
        await message.answer('–û—à–∏–±–∫–∞! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!!')
    await sql_for_dimacoin.update_time(user_id=message.from_user.id, seconds=-550)


@dp.message_handler(commands=['desc'])
async def cmd_desc(message: types.Message):
    await message.answer('–û–∫! –í–≤–µ–¥–∏ —É–ª–∏—Ü—É, –≥–æ—Ä–æ–¥, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞(<b>–ú–æ—Å–∫–≤–∞ –∏–ª–∏ –ö–æ—Ç–ª–∞—Å</b>)', parse_mode='html')
    await Register.desc.set()
    await sql_for_dimacoin.update_time(user_id=message.from_user.id, seconds=-234)


@dp.message_handler(state=Register.desc)
async def load_desc(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['desc'] = message.text
    await state.finish()
    await message.reply(text=f'<b>–í–æ—Ç —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ</b>: {data["desc"]}', parse_mode='html')
    await sql_for_dimacoin.update_desc(user_id=message.from_user.id, desc=str(data['desc']))
        # await bot.send_message(chat_id=CHAT_ID, text=f'{data["desc"]}')


@dp.message_handler()
async def all_txt(message: types.Message):
    text = message.text.lower()
    for word in for_help_cmd:
        if word in text:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –ø–ª–∞—Ç—ë–∂, –¥–∞–ª–µ–µ /desc, –ø–æ–∫—É–ø–∫–∞ –≤–µ—â–∏(–ø—Ä–∏–º–µ—Ä: /–ú—ã—à–∫–∏ 1), –Ω—É –∏ –∂–¥—ë—à—å –ø–æ–∫–∞ –æ–Ω–∞ –ø—Ä–∏–¥—ë—Ç\n'
                                 '(—É –Ω–∞—Å –µ—Å—Ç—å –≥—Ä—É–ø–ø–∞ –∫—É–¥–∞ —Å–ª–∏–≤–∞—é—Ç—Å—è —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∏ –∫ —Ç–µ–±–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Ç–æ–≤–∞—Ä).', reply_markup=kb_send_number_phone)
    for word in support:
        if word in text:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –ø–ª–∞—Ç—ë–∂, –¥–∞–ª–µ–µ /desc, –ø–æ–∫—É–ø–∫–∞ –≤–µ—â–∏(–ø—Ä–∏–º–µ—Ä: /–ú—ã—à–∫–∏ 1), –Ω—É –∏ –∂–¥—ë—à—å –ø–æ–∫–∞ –æ–Ω–∞ –ø—Ä–∏–¥—ë—Ç\n'
                                 '(—É –Ω–∞—Å –µ—Å—Ç—å –≥—Ä—É–ø–ø–∞ –∫—É–¥–∞ —Å–ª–∏–≤–∞—é—Ç—Å—è —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∏ –∫ —Ç–µ–±–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Ç–æ–≤–∞—Ä).')
    await sql_for_dimacoin.update_time(user_id=message.from_user.id, seconds=1)


async def on_startup(_):
    await sql_for_dimacoin.db_conn()
    print("OK! DB CONNECT")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False, on_startup=on_startup)   # –ß–¢–û –ë–´ –ù–ï –ü–†–û–ü–£–°–¢–ò–¢–¨ –ù–ò –û–î–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø!!!